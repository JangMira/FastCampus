install.packages("rvest")
library(rvest)


library(rvest)

url <- "http://www.tripadvisor.com/Hotel_Review-g37209-d1762915-Reviews-JW_Marriott_Indianapolis-Indianapolis_Indiana.html"


reviews <- url %>% 
  read_html() %>%
  html_nodes(".innerBubble")

id
quote <- reviews %>%
  html_node(".quote span") %>%
  html_text()


date <- reviews %>%
  html_node(".rating .ratingDate,relativeDate") %>%
  html_attr("title")


review <- reviews %>%
  html_node(".entry .partial_entry") %>%
  html_text()

data.frame(id, quote, date, review, stringsAsFactors = FALSE) %>% View()












install.packages("XML")
library(XML)
inven<-readHTMLTable("http://lol.inven.co.kr/dataninfo/match/playerList.php", header=T)


str(inven)
inven<-inven[[2]]
View(inven)
inven<-inven[, -c(1, 2,5)]
names(inven)<-c("name", "cmp", "result", "k", "d", "a", "kda", "help")
str(inven)
View(inven)


inven[, 4:7]<-sapply(inven[, 4:7], function(a){as.numeric(as.character(a))})
inven$help<-as.numeric(sub("%", "", inven$help))/100

inven$name<-as.character(inven$name)
temp<-as.data.frame(do.call(rbind, strsplit(inven$name, ' (?=[^ ]+$)', perl=TRUE)))

inven$name<-temp$V2
inven$team<-temp$V1


install.packages("rvest")
library(rvest)
lego_movie <- read_html("http://www.imdb.com/title/tt1490017/")
lego_movie %>%
  html_nodes("#titleCast .itemprop span") %>%
  html_text()


lego_movie %>%
  html_nodes("table") %>%
  .[[1]] %>%
  html_table()
  
  
  
library(XML)
url = paste0("http://www.snuco.com/html/restaurant/restaurant_menu2.asp?date=",Sys.Date())
doc = readLines(url, encoding="CP949")
doc = paste0(doc, collapse="\n")
doc = iconv(doc, to="UTF-8")
doc_parse = htmlParse(doc, isHTML=T, asText=T, encoding="UTF-8")
lunch_menu = xpathApply(doc_parse, "//div[@id='Content']//table//tbody//tr//td", xmlValue)
duremidam= unlist(lunch_menu)[[19]]
`301dong` = unlist(lunch_menu)[[26]]
cat("\n두레미담\n", gsub("\\/", "\n", duremidam), "\n\n301동\n", gsub("\\/", "\n", `301dong`), sep="")



url <- "http://www.bobaedream.co.kr/cyber/CyberCar.php?gubun=K&page=1" 
usedCar <- read_html(url) #해당 url 페이지의 html tag를 가져와서 parsing함. 
usedCar
str(usedCar)
carinfos<-html_nodes(usedCar, css='.carinfo')
carInfos[1] %>% html_nodes('.title') %>% html_text()





