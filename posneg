library(XML)
acsi.url<-"http://theacsi.org/index.php?option=com_content&view=article&id=147&catid=&Itemid=212&i=Department+and+Discount+Stores"


acsi.df<-readHTMLTable(acsi.url, header=T, which=1, stringsAsFactors=F)
acsi.df<-acsi.df[,c(1,18)]
acsi.df<-acsi.df[1:12,]


#Nordstrom / Dillard's / Kohl's / Dollar General / All Others / J.C. Penney 
#Department and Discount Stores / Target / Sears /Macy's / Exchange  /Wal-Mart 


acsi.df<-acsi.df[c(-4,-5,-7,-11),]

colnames(acsi.df)=c("company", "score")
acsi.df$score<-as.numeric(acsi.df$score)

acsi.df$code<-c("C1","C2","C3","C4","C5","C6","C7","C8")


#http://www.sitejabber.com/reviews/

#review sample
data<-read.csv(file.choose())

pos<-readLines(file.choose())
neg<-readLines(file.choose())

pos.final<-c(pos, 'upgrade')
neg.final<-c(neg, 'wait')




score.sentiment = function(sentences, pos.words, neg.words, .progress='none')
{
  require(plyr)
  require(stringr)
  
  scores = laply(sentences, function(sentence, pos.words, neg.words) {
    
    sentence = gsub('[[:punct:]]', '', sentence)
    sentence = gsub('[[:cntrl:]]', '', sentence)
    sentence = gsub('\\d+', '', sentence)
    sentence = tolower(sentence)
    
    word.list = str_split(sentence, '\\s+')
    words = unlist(word.list)
    
    pos.matches = match(words, pos.words)
    neg.matches = match(words, neg.words)
    
    pos.matches = !is.na(pos.matches)
    neg.matches = !is.na(neg.matches)
    
    score = sum(pos.matches) - sum(neg.matches)
    
    return(score)
  }, pos.words, neg.words, .progress=.progress )
  
  scores.df = data.frame(score=scores, text=sentences)
  return(scores.df)
}




result<-score.sentiment(data[,2], pos.final, neg.final)
result$score

result<-score.sentiment(data[,2], pos.final, neg.final, .progress="text")
result$score


amazon500<-readLines(file.choose())

result$company<-data[,1]

#plyr, company별 평균 점수
result1<-ddply(result, .(company), summarise, avg=mean(score))


library(ggplot2)

hist(result$score)
qplot(result$score)

all.scores<-result

ggplot(data=all.scores)+geom_bar(mapping=aes(x=score, fill=company), binwidth=1)+facet_grid(company~.)+theme_bw()+scale_fill_brewer()

